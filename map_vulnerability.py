
import os
os.chdir('D:/ENEA_CAS_WORK/Catania_RAFAEL/viasat_data')
os.getcwd()

import numpy as np
import pandas as pd
import geopandas as gpd
from geopandas import GeoDataFrame
from shapely.geometry import Point
import folium
import osmnx as ox
import networkx as nx
import math
import momepy
from funcs_network_FK import roads_type_folium
from shapely import geometry
from shapely.geometry import Point, Polygon
import psycopg2
import db_connect
import datetime
from datetime import datetime
from datetime import date
from datetime import datetime
from geoalchemy2 import Geometry, WKTElement
from sqlalchemy import *
import sqlalchemy as sal
import geopy.distance
import momepy
import csv
from shapely import wkb
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from folium_stuff_FK_map_matching import plot_graph_folium_FK
from PIL import Image


# today date
today = date.today()
today = today.strftime("%b-%d-%Y")

os.chdir('D:/ENEA_CAS_WORK/Catania_RAFAEL/viasat_data')
os.getcwd()

########################################################################################
########## DATABASE OPERATIONS #########################################################
########################################################################################

# connect to new DB to be populated with Viasat data after route-check
conn_HAIG = db_connect.connect_HAIG_Viasat_CT()
cur_HAIG = conn_HAIG.cursor()


# Function to generate WKB hex
def wkb_hexer(line):
    return line.wkb_hex

## function to transform Geometry from text to LINESTRING
def wkb_tranformation(line):
   return wkb.loads(line.geom, hex=True)

# Create an SQL connection engine to the output DB
engine = sal.create_engine('postgresql://postgres:superuser@192.168.132.18:5432/HAIG_Viasat_CT')


## load EDGES from OSM
gdf_edges = pd.read_sql_query('''
                            SELECT u,v, length, geom
                            FROM "OSM_edges" ''',conn_HAIG)
gdf_edges['geometry'] = gdf_edges.apply(wkb_tranformation, axis=1)
gdf_edges.drop(['geom'], axis=1, inplace= True)
gdf_edges = gpd.GeoDataFrame(gdf_edges)
## eventually....remove duplicates
gdf_edges.drop_duplicates(['u', 'v'], inplace=True)
# gdf_edges.plot()

##############################################
##############################################
### get all vulnerability outputs from DB ####

# ### all vehicles ('automobili' and 'veicoli pesanti')
# vulnerabilty_2019 = pd.read_sql_query('''
#                        SELECT *
#                           FROM vulnerability_2019 ''', conn_HAIG)
#
# ### only 'veicoli pesanti'
# vulnerabilty_2019 = pd.read_sql_query('''
#                        SELECT *
#                           FROM vulnerability_pesanti_2019 ''', conn_HAIG)
#
#
# ### all vehicles ('automobili' and 'veicoli pesanti for the month of FEBRUARY')
# vulnerabilty_2019 = pd.read_sql_query('''
#                        SELECT *
#                           FROM "vulnerability_all_FEBRUARY_2019" ''', conn_HAIG)
#
# ### all vehicles ('automobili' and 'veicoli pesanti for the month of AUGUST')
# vulnerabilty_2019 = pd.read_sql_query('''
#                        SELECT *
#                           FROM "vulnerability_all_AUGUST_2019" ''', conn_HAIG)


# ### all vehicles ('automobili' and 'veicoli pesanti for the month of AUGUST')
# vulnerabilty_2019 = pd.read_sql_query('''
#                        SELECT *
#                           FROM "vulnerability_all_OD_AUGUST_2019" ''', conn_HAIG)

### all vehicles ('automobili' and 'veicoli pesanti for the month of FEBRUARY')
vulnerabilty_2019 = pd.read_sql_query('''
                       SELECT *
                           FROM "vulnerability_all_OD_FEBRUARY_2019_NEW" ''', conn_HAIG)

### all vehicles ('automobili' and 'veicoli pesanti for the months of February, MAy, August and November')
# vulnerabilty_2019 = pd.read_sql_query('''
#                       SELECT *
#                          FROM "vulnerability_4seasons_2019_NEW" ''', conn_HAIG)


vulnerabilty_2019['u'] = vulnerabilty_2019.u.astype(np.int64)
vulnerabilty_2019['v'] = vulnerabilty_2019.v.astype(np.int64)


########################################################
##### build the map ####################################

vulnerabilty_2019 = pd.merge(vulnerabilty_2019, gdf_edges, on=['u', 'v'], how='left')
vulnerabilty_2019 = gpd.GeoDataFrame(vulnerabilty_2019)
vulnerabilty_2019.drop_duplicates(['u', 'v'], inplace=True)
# vulnerabilty_2019.plot()


## rescale all data by an arbitrary number
vulnerabilty_2019["scales"] = round(((vulnerabilty_2019.importance/max(vulnerabilty_2019.importance)) * 3) + 0.1 ,1)

# add colors based on 'importance' (vehicles*hours)
vmin = min(vulnerabilty_2019.scales)   # -0.4
vmax = max(vulnerabilty_2019.scales)
# Try to map values to colors in hex
norm = matplotlib.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
mapper = plt.cm.ScalarMappable(norm=norm, cmap=plt.cm.YlOrRd)  # scales of Reds (or "coolwarm" , "bwr", °cool°)  gist_yarg --> grey to black, YlOrRd
vulnerabilty_2019['color'] = vulnerabilty_2019['scales'].apply(lambda x: mcolors.to_hex(mapper.to_rgba(x)))
vulnerabilty_2019['importance'] = round(vulnerabilty_2019['importance'], 0)

## Normalize to 1
vulnerabilty_2019["vulnerability"] = round(vulnerabilty_2019["scales"]/max(vulnerabilty_2019["scales"]),1)

# vulnerabilty_2019 = vulnerabilty_2019[vulnerabilty_2019.vulnerability >= 0.7]

################################################################################
# create basemap CATANIA
ave_LAT = 37.510284
ave_LON = 15.092042
my_map = folium.Map([ave_LAT, ave_LON], zoom_start=11, tiles='cartodbpositron')
#################################################################################

##################################################################

'''
TIME_EDGES = gpd.read_file("sottorete_speed.geojson")
# TIME_EDGES = TIME_EDGES[TIME_EDGES.counts >= 35000]
# TIME_EDGES.plot()
## save data
TIME_EDGES.to_file(filename='sottorete.geojson', driver='GeoJSON')
folium.GeoJson('sottorete.geojson').add_to((my_map))
my_map.save("vulnerability_2019_Catania.html")
'''

folium.GeoJson(
vulnerabilty_2019[['u','v', 'importance', 'scales', 'vulnerability', 'geometry']].to_json(),
    style_function=lambda x: {
        'fillColor': 'black',
        'color': 'black',
        'weight':  x['properties']['scales'],
        'fillOpacity': 1,
        },
highlight_function=lambda x: {'weight':3,
        'color':'blue',
        'fillOpacity':1
    },
    # fields to show
    tooltip=folium.features.GeoJsonTooltip(
        fields=['u', 'v', 'vulnerability']),
    ).add_to(my_map)

path = 'D:/ENEA_CAS_WORK/Catania_RAFAEL/viasat_data/'
# my_map.save(path + "vulnerability_pesanti_2019_Catania.html")
# my_map.save(path + "vulnerability_FEBRUARY_2019_Catania_all_vehicles.html")
# my_map.save(path + "vulnerability_AUGUST_2019_Catania_all_vehicles.html")


########################################
# make a colored map  ##################
########################################

my_map = plot_graph_folium_FK(vulnerabilty_2019, graph_map=None, popup_attribute=None,
                              zoom=15, fit_bounds=True, edge_width=3, edge_opacity=0.5)
style = {'fillColor': '#00000000', 'color': '#00000000'}
# add 'u' and 'v' as highligths for each edge (in blue)
folium.GeoJson(
    # data to plot
    vulnerabilty_2019[['u','v', 'importance', 'scales', 'vulnerability', 'geometry']].to_json(),
    show=True,
    style_function=lambda x:style,
    highlight_function=lambda x: {'weight':3,
        'color':'blue',
        'fillOpacity':0.6
    },
    # fields to show
    tooltip=folium.features.GeoJsonTooltip(
        fields=['u', 'v', 'vulnerability']
    ),
).add_to(my_map)
folium.TileLayer('cartodbdark_matter').add_to(my_map)
folium.LayerControl().add_to(my_map)
path = 'D:/ENEA_CAS_WORK/Catania_RAFAEL/viasat_data/'
# my_map.save(path + "vulnerability_AUGUST_2019_Catania_all_vehicles.html")
# my_map.save(path + "vulnerability_FEBRUARY_2019_Catania_all_vehicles.html")
# my_map.save(path + "vulnerability_AUGUST_2019_Catania_all_OD_vehicles.html")
my_map.save(path + "vulnerability_FEBRUARY_2019_Catania_all_OD_vehicles_NEW.html")
# my_map.save(path + "vulnerability_FEB_MAY_AUG_NOV_2019_Catania_all_OD_vehicles.html")



#################################################################################
#################################################################################
#################################################################################
#################################################################################

## make maps with hexagonal CELL
#################################

# ### all vehicles ('automobili' and 'veicoli pesanti for the month of AUGUST')
# vulnerabilty_2019_all = pd.read_sql_query('''
#                        SELECT *
#                           FROM "vulnerability_all_OD_AUGUST_2019" ''', conn_HAIG)

### all vehicles ('automobili' and 'veicoli pesanti for the month of AUGUST')
vulnerabilty_2019_all = pd.read_sql_query('''
                       SELECT *
                          FROM "vulnerability_all_OD_FEBRUARY_2019_NEW" ''', conn_HAIG)


### all vehicles ('automobili' and 'veicoli pesanti for the month of AUGUST')
# vulnerabilty_2019_all = pd.read_sql_query('''
#                       SELECT *
#                          FROM "vulnerability_4seasons_2019_NEW" ''', conn_HAIG)

### load all hexagonal cells (hex_grid)
## hex_grid = gpd.read_file("hex_grid.geojson")
# hex_grid = gpd.read_file("hex_grid_400m.geojson")   ## 4 SEASONS
hex_grid = gpd.read_file("hex_grid_400m_FEBRUARY.geojson")
# hex_grid = gpd.read_file("hex_grid_400m_AUGUST.geojson")

hex_grid['CELL'] = hex_grid.index
CELLS_vulnerabilty_2019_all = pd.merge(vulnerabilty_2019_all[['CELL', 'importance']], hex_grid, on=['CELL'], how='inner')

### veicoli pesanti
# CELLS_vulnerabilty_2019_all = pd.merge(vulnerabilty_2019_pesanti[['CELL', 'importance']], hex_grid, on=['CELL'], how='inner')

### automobili
# CELLS_vulnerabilty_2019_all = pd.merge(vulnerabilty_2019_automobili[['CELL', 'importance_automobili']], hex_grid, on=['CELL'], how='inner')
### remane column
# CELLS_vulnerabilty_2019_all.rename(columns={'importance_automobili':'importance'}, inplace=True)


CELLS_vulnerabilty_2019_all = gpd.GeoDataFrame(CELLS_vulnerabilty_2019_all)
# CELLS_vulnerabilty_2019_all.plot()


## rescale all data by an arbitrary number
CELLS_vulnerabilty_2019_all["scales"] = round(((CELLS_vulnerabilty_2019_all.importance/max(CELLS_vulnerabilty_2019_all.importance)) * 3) + 0.1 ,1)
CELLS_vulnerabilty_2019_all["vulnerability"] = round(CELLS_vulnerabilty_2019_all["scales"]/max(CELLS_vulnerabilty_2019_all["scales"]),1)

# CELLS_vulnerabilty_2019_all = CELLS_vulnerabilty_2019_all[CELLS_vulnerabilty_2019_all.vulnerability >= 0.7]


## make a color map for the link importance (vehicles*hours) of each element in each hexagonal cell
# add colors based on 'importance' (vehicles*hours)
vmin = min(CELLS_vulnerabilty_2019_all.scales)   # -0.4
vmax = max(CELLS_vulnerabilty_2019_all.scales)
# Try to map values to colors in hex
norm = matplotlib.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
mapper = plt.cm.ScalarMappable(norm=norm, cmap=plt.cm.YlOrRd)  # scales of Reds (or "coolwarm" , "bwr", °cool°)  gist_yarg --> grey to black
CELLS_vulnerabilty_2019_all['colors'] = CELLS_vulnerabilty_2019_all['scales'].apply(lambda x: mcolors.to_hex(mapper.to_rgba(x)))
CELLS_vulnerabilty_2019_all['importance'] = round(CELLS_vulnerabilty_2019_all['importance'], 0)

################################################################################
# create basemap CATANIA
ave_LAT = 37.510284
ave_LON = 15.092042
my_map = folium.Map([ave_LAT, ave_LON], zoom_start=11, tiles='cartodbpositron')
#################################################################################
#################################################################################

CELLS_vulnerabilty_2019_all=CELLS_vulnerabilty_2019_all.rename(columns = {'importance':'importance (vei*hour)'})

folium.GeoJson(
CELLS_vulnerabilty_2019_all[['importance (vei*hour)', 'colors', 'scales', 'vulnerability',
                             'geometry']].to_json(),
    style_function=lambda x: {
        'fillColor': x['properties']['colors'],
        'color': x['properties']['colors'],
        'weight':  0.5,
        'fillOpacity': 0.05,
        },
highlight_function=lambda x: {'weight':1,
        'color':'blue',
        'fillOpacity':0.1
    },
    # fields to show
    tooltip=folium.features.GeoJsonTooltip(
        fields=['vulnerability']),
    ).add_to(my_map)


folium.TileLayer('cartodbdark_matter').add_to(my_map)
folium.LayerControl().add_to(my_map)
# my_map.save("CELL_vulnerability_2019_Catania_all_vehicles.html")
# my_map.save("CELL_vulnerability_pesanti_2019_Catania.html")
# my_map.save("CELL_vulnerability_automobili_2019_Catania.html")
# my_map.save("CELL_vulnerability_FEBRUARY_2019_Catania_all_vehicles.html")
# my_map.save("CELL_vulnerability_AUGUST_2019_Catania_all_vehicles.html")
# my_map.save("CELL_vulnerability_AUGUST_2019_Catania_all_OD_vehicles.html")
my_map.save("CELL_vulnerability_FEBRUARY_2019_Catania_all_OD_vehicles_NEW.html")
# my_map.save("CELL_vulnerability_FEB_MAY_AUG_NOV_2019_Catania_all_OD_vehicles.html")




######################
#####################################
#################################################
###############################################################
###############################################################################
#######################################################################################
##########################################################################################
############################################################################################
############################################################################################
############################################################################################
############################################################################################
############################################################################################

#### make difference map between VULNERABILITY for all vehicles and for veicoli pesanti (I should get VULNERABILITY for AUTOMOBILI)

vulnerabilty_2019_all = pd.read_sql_query('''
                       SELECT *
                          FROM vulnerability_2019 ''', conn_HAIG)


vulnerabilty_2019_all = pd.read_sql_query('''
                       SELECT *
                          FROM "vulnerability_all_FEBRUARY_2019_NEW" ''', conn_HAIG)


### all vehicles ('automobili' and 'veicoli pesanti for the month of AUGUST')
# vulnerabilty_2019_all = pd.read_sql_query('''
#                       SELECT *
#                          FROM "vulnerability_all_OD_AUGUST_2019" ''', conn_HAIG)

vulnerabilty_2019_all['u'] = vulnerabilty_2019_all.u.astype(np.int64)
vulnerabilty_2019_all['v'] = vulnerabilty_2019_all.v.astype(np.int64)


vulnerabilty_2019_pesanti = pd.read_sql_query('''
                       SELECT *
                          FROM vulnerability_pesanti_2019 ''', conn_HAIG)


## merge the two df (all vehicles and veicoloi pesanti)
vulnerabilty_2019_automobili = pd.merge(vulnerabilty_2019_all, vulnerabilty_2019_pesanti, on=['u', 'v', 'CELL'], how='inner')
vulnerabilty_2019_automobili.drop_duplicates(['u', 'v', 'CELL'], inplace=True)
## rename all columns
vulnerabilty_2019_automobili.drop(['index_x', 'index_y'], axis='columns', inplace=True)
vulnerabilty_2019_automobili.columns = ['u', 'v', 'CELL', 'importance_all', 'importance_pesanti']
## make difference between 'all_vehicles' and 'veicoli_pesanti'
vulnerabilty_2019_automobili['importance_automobili'] = vulnerabilty_2019_automobili.importance_all - vulnerabilty_2019_automobili.importance_pesanti

## merge with OSM edges
vulnerabilty_2019_automobili = pd.merge(vulnerabilty_2019_automobili, gdf_edges, on=['u', 'v'], how='left')
vulnerabilty_2019_automobili.drop_duplicates(['u', 'v', 'CELL'], inplace=True)
vulnerabilty_2019_automobili.drop(['importance_all', 'importance_pesanti'], axis='columns', inplace=True)
## make a geodataframe
vulnerabilty_2019_automobili = gpd.GeoDataFrame(vulnerabilty_2019_automobili)
# vulnerabilty_2019_automobili.plot()


## rescale all data by an arbitrary number
vulnerabilty_2019_automobili["scales"] = round(((vulnerabilty_2019_automobili.importance_automobili/max(vulnerabilty_2019_automobili.importance_automobili)) * 3) + 0.1 ,1)
vulnerabilty_2019_automobili["vulnerability"] = round(vulnerabilty_2019_automobili["scales"]/max(vulnerabilty_2019_automobili["scales"]),1)


################################################################################
# create basemap CATANIA
ave_LAT = 37.510284
ave_LON = 15.092042
my_map = folium.Map([ave_LAT, ave_LON], zoom_start=11, tiles='cartodbpositron')
#################################################################################
#################################################################################


folium.GeoJson(
vulnerabilty_2019_automobili[['u','v', 'importance_automobili', 'scales', 'vulnerability',
                              'geometry']].to_json(),
    style_function=lambda x: {
        'fillColor': 'black',
        'color': 'black',
        'weight':  x['properties']['scales'],
        'fillOpacity': 1,
        },
highlight_function=lambda x: {'weight':3,
        'color':'blue',
        'fillOpacity':1
    },
    # fields to show
    tooltip=folium.features.GeoJsonTooltip(
        fields=['u', 'v', 'vulnerability']),
    ).add_to(my_map)

path = 'D:/ENEA_CAS_WORK/Catania_RAFAEL/viasat_data/'
my_map.save(path + "vulnerability_automobili_2019_Catania.html")

#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
